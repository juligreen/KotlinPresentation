#+OPTIONS: num:nil toc:nil
#+REVEAL_ROOT: reveal.js
#+REVEAL_TRANS: none
#+REVEAL_THEME: moon
#+Title: Magic Mighty Kotlin
#+Author: Julius Dehner
#+Email: julius.dehner@gmail.com


* Stackoverflow Umfrage 2019
** Meistverwendete Programmiersprachen
[[./images/stackoverflow_used.png]]
** Meistgehasste Programmiersprachen
[[./images/stackoverflow_hated.png]]
** Programmiersprachen werden benutzt weil...
   - ...es f√ºr den Use-case keine Alternative gibt (siehe Javascript)
   - ...sie bereits in einer Firma verwendet werden
   - ...es ein gutes √ñkosystem  gibt (Libraries, IDEs)
   - ...sie gute Language-Features besitzen
* Introducing:
  [[./images/Kotlin.png]]
* Main Features
** Open Source, entwickelt von Jetbrains
   #+ATTR_REVEAL: :frag (roll-in)
   - sehr gute IDE-Integration
   - Konstante Weiterentwicklung
   - 2015 von Google zur Android-Entwicklung empfohlen
** Kotlin compiliert zu JVM-bytecode, Javascript und nativem Code!
   #+ATTR_REVEAL: :frag (roll-in)
   [[./images/pikachu.png]]
** Leichter Umstieg
   #+ATTR_REVEAL: :frag (roll-in)
   - Kotlin unterst√ºtzt alle Java-Libraries
   - Kotlin benutzt die gleichen Build-Systeme
   - Java- und Kotlin-Files k√∂nnen gleichzeiteig in einem Projekt existieren
   - IntelliJ Autokonvertierung

* Language Features
** String Interpolation
#+BEGIN_SRC kotlin :exports both
  val name = "Julius"
  val age = 21
  print("Mein Name ist $name und ich bin $age Jahre alt. ")
#+END_SRC

#+RESULTS:
: Mein Name ist Julius und ich bin 21 Jahre alt. res9: kotlin.String = >>> 
** Type Inference
#+BEGIN_SRC kotlin
  val a = "test"
  val b = 4

  val c: Double = 0.7
#+END_SRC
** Equals
#+BEGIN_SRC kotlin
  val a = Person("Julius")
  val b = Person("Julius")

  print(a == b)  //true
  print(a === b) //false
#+END_SRC

** Default Arguments
#+BEGIN_SRC kotlin
  fun buildFrame(title: String, width: Int = 800, height: Int = 600) {

	  Frame(title, width, height)

  }

#+END_SRC
** Java: If/Switch
#+BEGIN_SRC java
  switch(x) {
    case 1:
	System.out.println("x is 1");
      break;
    case 2:
	System.out.println("x is 1");
      break;
    case 3:
    case 4:
	System.out.println("x is 3 or 4");
      break;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
	System.out.println("x is 5, 6, 7, 8, 9, or 10");
    default:
	System.out.println("x is out of range");
  }
#+END_SRC
** Kotlin: When
#+BEGIN_SRC kotlin
when (x) {
    1 -> print("x is 1")
    2 -> print("x is 2")
    3, 4 -> print("x is 3 or 4")
    in 5..10 -> print("x is 5, 6, 7, 8, 9, or 10")
    else -> print("x is out of range")
}
#+END_SRC

** Extension Functions
#+BEGIN_SRC kotlin :exports both
  fun String.replaceSpaces(): String {
      return this.replace(' ', '_')
  }
  val str = "This is a test"
  val formatted = str.replaceSpaces()
  print("$formatted ")
#+END_SRC

#+RESULTS:
: This_is_a_test res23: kotlin.String = >>> 

** Null Safety 1
#+BEGIN_SRC kotlin :exports both
  var a: String = "abc"
  a = null               
#+END_SRC

#+RESULTS:
: [1;31merror: [0;1mnull can not be a value of a non-null type String[m
: a = null               
:     ^
: 
: res29: kotlin.String = >>> 

#+BEGIN_SRC kotlin :exports both
    var b: String? = "xyz"
    b = null                
#+END_SRC

#+RESULTS:
: res31: kotlin.String = >>> 

** Null Safety 2
#+BEGIN_SRC kotlin :exports both
  val b: String? = "test"
  val x = b.length
#+END_SRC

#+RESULTS:
: [1;31merror: [0;1monly safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type String?[m
: val x = b.length
:          ^
: 
: res75: kotlin.String = >>> 

#+BEGIN_SRC kotlin :exports both
  val b: String? = "test"
  if (b != null) {
    val x = b.length
  }
#+END_SRC

#+RESULTS:
: res73: kotlin.String = >>> 

* Live Vergleich
** Java-Code
#+BEGIN_SRC java
  public class Person {
      private String surName;
      private String familyName;
      private int age;

      public Person(String surName, String familyName, int age) {
	  this.surName = surName;
	  this.familyName = familyName;
	  this.age = age;
      }

      @Override
      public String toString(){
	  return this.surName + " " + this.familyName;
      }

      public String getSurName() {
	  return surName;
      }

      public void setSurName(String surName) {
	  this.surName = surName;
      }

      public String getFamilyName() {
	  return familyName;
      }

      public void setFamilyName(String familyName) {
	  this.familyName = familyName;
      }

      public int getAge() {
	  return age;
      }

      public void setAge(int age) {
	  this.age = age;
      }
  }
#+END_SRC

** Kotlin
#+BEGIN_SRC kotlin
  class Person(var surName: String?, var familyName: String?, var age: Int) {

      override fun toString(): String {
	  return this.surName + " " + this.familyName
      }
  }
#+END_SRC

* Danke f√ºr die Aufmerksamkeit
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-background-video="videos/there is no need to be upset.mp4" data-background-video-muted="true" data-background-video-loop="true"
:END:

* Quellen
 - https://medium.com/@magnus.chatt/why-you-should-totally-switch-to-kotlin-c7bbde9e10d5
 - https://blog.plan99.net/why-kotlin-is-my-next-programming-language-c25c001e26e3
 - https://medium.com/pinterest-engineering/kotlin-for-grumpy-java-developers-8e90875cb6ab
